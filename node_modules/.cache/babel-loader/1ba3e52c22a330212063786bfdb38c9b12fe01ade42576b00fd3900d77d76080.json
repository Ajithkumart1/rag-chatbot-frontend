{"ast":null,"code":"import io from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n  }\n  connect() {\n    const serverUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\n    console.log('üîå Attempting to connect to:', serverUrl);\n    this.socket = io(serverUrl, {\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 20000\n    });\n    this.socket.on('connect', () => {\n      console.log('‚úÖ Connected to server');\n      this.isConnected = true;\n    });\n    this.socket.on('disconnect', reason => {\n      console.log(`‚ùå Disconnected from server: ${reason}`);\n      this.isConnected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('‚ö†Ô∏è Connection error:', error);\n    });\n    return this.socket;\n  }\n  joinSession(sessionId) {\n    var _this$socket;\n    if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) {\n      this.socket.emit('join-session', sessionId);\n    } else {\n      console.warn('Socket not connected yet.');\n    }\n  }\n  sendMessage(sessionId, message) {\n    var _this$socket2;\n    if ((_this$socket2 = this.socket) !== null && _this$socket2 !== void 0 && _this$socket2.connected) {\n      this.socket.emit('send-message', {\n        sessionId,\n        message\n      });\n    } else {\n      console.warn('Socket not connected yet.');\n    }\n  }\n  onBotResponse(callback) {\n    if (this.socket) {\n      this.socket.on('bot-response', callback);\n    }\n  }\n  onBotTyping(callback) {\n    if (this.socket) {\n      this.socket.on('bot-typing', callback);\n    }\n  }\n  offBotResponse(callback) {\n    var _this$socket3;\n    (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.off('bot-response', callback);\n  }\n  offBotTyping(callback) {\n    var _this$socket4;\n    (_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.off('bot-typing', callback);\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.isConnected = false;\n    }\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","connect","serverUrl","process","env","REACT_APP_BACKEND_URL","console","log","transports","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","reason","error","joinSession","sessionId","_this$socket","connected","emit","warn","sendMessage","message","_this$socket2","onBotResponse","callback","onBotTyping","offBotResponse","_this$socket3","off","offBotTyping","_this$socket4","disconnect"],"sources":["C:/Users/ajith/chatbot/rag-chatbot-project/rag-chatbot-frontend/src/services/socketService.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n  }\r\n\r\n  connect() {\r\n  const serverUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';\r\n  console.log('üîå Attempting to connect to:', serverUrl);\r\n  \r\n  this.socket = io(serverUrl, {\r\n    transports: ['websocket', 'polling'],\r\n    reconnection: true,\r\n    reconnectionAttempts: 5,\r\n    reconnectionDelay: 1000,\r\n    timeout: 20000\r\n  });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('‚úÖ Connected to server');\r\n      this.isConnected = true;\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason) => {\r\n      console.log(`‚ùå Disconnected from server: ${reason}`);\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('‚ö†Ô∏è Connection error:', error);\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  joinSession(sessionId) {\r\n    if (this.socket?.connected) {\r\n      this.socket.emit('join-session', sessionId);\r\n    } else {\r\n      console.warn('Socket not connected yet.');\r\n    }\r\n  }\r\n\r\n  sendMessage(sessionId, message) {\r\n    if (this.socket?.connected) {\r\n      this.socket.emit('send-message', { sessionId, message });\r\n    } else {\r\n      console.warn('Socket not connected yet.');\r\n    }\r\n  }\r\n\r\n  onBotResponse(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('bot-response', callback);\r\n    }\r\n  }\r\n\r\n  onBotTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('bot-typing', callback);\r\n    }\r\n  }\r\n\r\n  offBotResponse(callback) {\r\n    this.socket?.off('bot-response', callback);\r\n  }\r\n\r\n  offBotTyping(callback) {\r\n    this.socket?.off('bot-typing', callback);\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new SocketService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}